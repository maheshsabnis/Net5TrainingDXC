
@using System.Reflection
@using Microsoft.AspNetCore.Components.WebAssembly.Services

// inject the LazyAssemblyLoader that will have collection of assemblies to be loaded at runtime

@inject LazyAssemblyLoader AssemblyLoader;

<Router AppAssembly="@typeof(Program).Assembly" PreferExactMatches="@true"
		 OnNavigateAsync="OnNavigateAsync"
		AdditionalAssemblies="lazyAssemblies">
	<Found Context="routeData">
		<RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
	</Found>
	<NotFound>
		<LayoutView Layout="@typeof(MainLayout)">
			<p>Sorry, there's nothing at this address.</p>
		</LayoutView>
	</NotFound>
</Router>

@code{
	// ask the end-user to navigate to the component explicitely
	// so that the erferred assembly can be loaded
	// NavigationContext: the class that will be used to set the 
	// URL Based navigation to define navigation request for a specific URL
	// for the component
	private List<Assembly> lazyAssemblies = new List<Assembly>();

	private async Task OnNavigateAsync(NavigationContext context)
	{
		// checking if a specific Path is requested
		// when the 'fetchproducts' link is cliekced the Assembly will be lazily loaded
		if (context.Path == "fetchproducts")
		{
			// load an assembly from the current project
			// that has the path
			// load assrembly(ies) based on their names
			var assemblies = await AssemblyLoader.LoadAssembliesAsync(new[] { "Product_LazyLoad.dll" });
			lazyAssemblies.AddRange(assemblies);
		}
	}
}